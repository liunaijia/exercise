package data;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

import javax.annotation.Resource;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

public class Database {
	private final String url;
	private final boolean throwWarnings;

	public Database(String url) {
		this.url = url;
		this.throwWarnings = true;
	}

	private Connection createConnection() throws SQLException {
		// 在 JDBC API 4.0 中，DriverManager.getConnection 方法得到了增强，可自动加载 JDBC
		// Driver。 因此，使用 sqljdbc4.jar 类库时，应用程序无需调用 Class.forName 方法来注册或加载驱动程序。
		boolean useDataSource = false;
		if (!useDataSource)
			return DriverManager.getConnection(url);

		try {
			Context context = new InitialContext();
			DataSource dataSource = (DataSource) context
					.lookup("java:comp/env/jdbc/corejava");
			return dataSource.getConnection();

			// 或者使用
			// @Resource(name="jdbc/corejava")
			// private DataSource dataSource;
		} catch (NamingException e) {
			throw new SQLException(e);
		}
	}

	public int executeUpdate(String sql, Object... values) throws SQLException {
		int rowCount;
		try (Connection connection = createConnection()) {
			try (PreparedStatement statement = prepareStatement(connection, sql, values)) {
				rowCount = statement.executeUpdate();
				handleWarnings(statement.getWarnings());
			}
			handleWarnings(connection.getWarnings());
		}
		return rowCount;
	}

	// public <E> Iterable<E> executeQuery(String sql,
	// FunctionThatThrows<ResultSet, E> action) throws SQLException {
	// try (Connection connection = createConnection()) {
	// try (Statement statement = connection.createStatement()) {
	// try (ResultSet rs = statement.executeQuery(sql)) {
	// return new Iterable<E>() {
	// @Override
	// public Iterator<E> iterator() {
	// return new ResultSetIterator<E>(rs, action);
	// }
	// };
	// }
	// }
	// }
	// }

	private void handleWarnings(SQLWarning warning) throws SQLWarning {
		if (throwWarnings && warning != null)
			throw warning;
	}

	private PreparedStatement prepareStatement(Connection connection, String sql, Object... values) throws SQLException {
		PreparedStatement statement = connection.prepareStatement(sql);
		if (values != null)
			for (int i = 0; i < values.length; i++)
				statement.setObject(i + 1, values[i]);
		return statement;
	}

	public <E> List<E> executeQuery(String sql, Object[] values, FunctionThatThrows<ResultSet, E> action) throws SQLException {
		List<E> list = new LinkedList<>();
		try (Connection connection = createConnection()) {
			try (PreparedStatement statement = prepareStatement(connection, sql, values)) {
				try (ResultSet rs = statement.executeQuery()) {
					while (rs.next()) {
						E e = action.apply(rs);
						list.add(e);

						handleWarnings(rs.getWarnings());
					}
				}

				handleWarnings(statement.getWarnings());
			}

			handleWarnings(connection.getWarnings());
		}
		return list;
	}

	public static void main(String[] args) throws SQLException {
		
		try {
			// "jdbc:sqlserver://localhost;databaseName=scm;user=MyUserName;password=*****;";
			boolean query = false;
			String url = "jdbc:sqlserver://localhost;databaseName=scm;integratedSecurity=true;";
			Database db = new Database(url);
			if (query) {
				Iterable<String> names = db
						.executeQuery(
								"select Fullname from Users where Username = ? or Level = ?",
								new Object[] { "lnj", 2 }, (rs) -> {
									return rs.getString("Fullname"); // getXXX的类型和字段类型不一致时，会自动进行转换
							});

				names.forEach(System.out::println);
			}
			else{
				int rows = db.executeUpdate("insert into Users(Username, fullname, level)values(?,?,?)", new Object[]{"hb", "冰冰", 2});
				System.out.println(rows);
			}
		} catch (SQLException e) {
			System.out.println("sql执行异常");
			// 每个SQLException都由多个SQLException对象构成
			for (Throwable t : e)
				t.printStackTrace();
		}
	}
}
