package bytecode;

import java.io.DataInputStream;
import java.io.IOException;

public abstract class ConstantPoolInfo {
	protected abstract int getTag();
	
	public ConstantPoolInfo(DataInputStream stream, boolean checkTag) throws IOException{
		if (checkTag) {
			int tag = new U1(stream).getValue();
			int expected = getTag();
			if (expected != tag)
				throw new ClassFormatError(String.format("constant pool tag check failed, should be %d not %d", expected, tag));
		}
	}

	public static ConstantPoolInfo instance(DataInputStream stream) throws IOException {
		ConstantPoolInfo constantPoolInfo;
		
		int tag = new U1(stream).getValue();
		switch(tag) {
			case 1:
				constantPoolInfo = new ConstantUtf8Info(stream, false);
				break;
			case 7:
				constantPoolInfo = new ConstantClassInfo(stream, false);
				break;
			case 10:
				constantPoolInfo = new ConstantMethodRefInfo(stream, false);
				break;
			case 12:
				constantPoolInfo = new ConstantNameAndTypeInfo(stream, false);
				break;
			default:
				throw new ClassFormatError(String.format("invalid constant pool tag %d", tag));
		}
		
		return constantPoolInfo;
	}
}